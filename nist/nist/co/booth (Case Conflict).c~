#include<stdio.h>
#include<memory.h>
#include<stdlib.h>
#include<math.h>
int bit=4;
int *c=NULL;

void add(int *a,int *b){
	int cr=0,i,x;

	for(i=bit-1;i>=0;i--){
		x=a[i];
		a[i]=cr^x^b[i];
		if((x==1 && cr==1) || (x==1 && b[i]==1) ||(cr==1 && b[i]==1))
			cr=1;
		else
			cr=0;
	}
}
void _2scomp(int *a){

	int i;
	for(i=0;i<bit;i++){
		a[i]=1-a[i];
	}
	add(a,c);

}

void binary(int *arr,int n){

	int i=bit-1;

	while(n){
		arr[i]=n%2;
		n/=2;
		i--;
	}

}
int  rshift(int *a,int *q){

		int alast=a[bit-1],qlast=q[bit-1],i;
		for(i=bit-1;i>0;i--){
			a[i]=a[i-1];
		}

		for(i=bit-1;i>0;i--){
			q[i]=q[i-1];
		}
		q[0]=alast;

		return qlast;
}

int decimal(int *a,int *b,int *arr){
	int ans=0,i,s=0;

for(i=0;i<bit;i++){
	arr[i]=a[i];
	arr[i+bit]=b[i];
}

for(i=0;i<2*bit;i++){
	printf("%d__ ",arr[i]);
}

	if(arr[0]==1){
	s=1;
	printf("-ve number\n");
	
	for(i=0;i<2*bit;i++){
		arr[i]=1-arr[i];
	}
	
	int cr=1,i,x,c=0;

	for(i=2*bit-1;i>=0;i--){
		x=arr[i];
		arr[i]=cr^x^c;
		if((x==1 && cr==1))
			cr=1;
		else
			cr=0;
	}
	}

for(i=0;i<2*bit;i++){
	printf("%d__ ",arr[i]);
}

	for(i=2*bit-1;i>=0;i--){
		if(arr[i]==1){
			ans+=(pow(2,2*bit-i-1));
			//printf("added-from a->%d   i=%d  bit=%d\n",(int)(pow(2,2*bit-i-1)),i,2*bit-i-1);
		}

	}
if(s==1)
return -1*ans;

return ans;
}


int main(){

	int M,Q,i,j,_q1=0;
	int *arra,*arrm,*arr2m,*arrq,*arr;
	printf("enter m and q\n");
	scanf("%d %d",&M,&Q);
	int tm=fabs(M),tq=fabs(Q);
	int cbit=0;
	while(tm || tq){
        cbit++;
        tm=tm>>1;
        tq=tq>>1;
	}
        bit=cbit+1;
	
	arra=(int *)malloc(sizeof(int)*bit);
	memset(arra,0,sizeof(int)*bit);

    c=(int*)malloc(sizeof(int)*bit);
    memset(c,0,sizeof(int)*bit);
    c[bit-1]=1;

	arrm=(int *)malloc(sizeof(int)*bit);
	memset(arrm,0,sizeof(int)*bit);

	arr2m=(int *)malloc(sizeof(int)*bit);
	memset(arr2m,0,sizeof(int)*bit);
	
	arrq=(int *)malloc(sizeof(int)*bit);
	memset(arrq,0,sizeof(int)*bit);
	
	arr=(int*)malloc(sizeof(int)*2*bit);
	memset(arr,0,sizeof(int)*2*bit);

	if(M<0){
		binary(arrm,-1*M);
		_2scomp(arrm);
		binary(arr2m,-1*M);
		//_2scomp(arr2m);

	}else{

		binary(arrm,M);
		binary(arr2m,M);
		_2scomp(arr2m);
	}
	if(Q<0){
		binary(arrq,-1*Q);
		_2scomp(arrq);
	}else{
	binary(arrq,Q);
	}

	for(i=0;i<bit;i++){
		printf("%d ",arrm[i]);
	}
	printf("----->binary^^m\n");

	for(i=0;i<bit;i++){
		printf("%d ",arrq[i]);
	}
	printf("-------->binary^^q\n");

	for(i=0;i<bit;i++){
		printf("%d ",arr2m[i]);
	}
	printf("--------->binary^^2m\n");

	for(i=0;i<bit;i++){
		printf("%d ",arra[i]);
	}
	printf("----------->binary^^a\n");
	printf("-------------------------\n");


	for(j=0;j<bit;j++){
		if(arrq[bit-1]==0 && _q1==1){
			add(arra,arrm);
			printf("a=a+m\n");
		}
		else if(arrq[bit-1]==1 && _q1==0){
			add(arra,arr2m);
			printf("a=a-m\n");
		}


	for(i=0;i<bit;i++){
		printf("%d ",arra[i]);
	}
	printf("    ");
    for(i=0;i<bit;i++){
		printf("%d ",arrq[i]);
	}
	printf("     %d\n",_q1);


	 _q1=rshift(arra,arrq);


	for(i=0;i<bit;i++){
		printf("%d ",arra[i]);
	}
	printf("    ");
    for(i=0;i<bit;i++){
		printf("%d ",arrq[i]);
	}
	printf("     %d\n",_q1);
	printf("-------------------------\n");
}
	int ans=decimal(arra,arrq,arr);
	printf("ans-->%d\n\n",ans);
return 0;
}
